# Python Best Practices for Airbnb Mail to AI Bot

このプロジェクトでは、以下のPythonベストプラクティスを遵守してください。

## コード構造とスタイル

- **型ヒント**: すべての関数とメソッドに型ヒントを使用する（`mypy`で検証）
- **ドキュメント**: Googleスタイルのdocstringを使用してすべての関数・クラス・モジュールにドキュメントを記述
- **命名規則**:
  - クラス: `PascalCase`
  - 関数・メソッド・変数: `snake_case`
  - 定数: `UPPER_SNAKE_CASE`
  - プライベート属性: 先頭に`_`（例: `_private_method`）
- **コードフォーマット**: PEP8準拠（`ruff`と`black`のルールに従う）
  - 行の長さ: 最大88文字
  - インデント: 4スペース
  - 引用符: ダブルクォーテーション`"`を優先

## パッケージ管理

- **Poetry**: パッケージ管理および仮想環境管理には必ずPoetryを使用すること
- **依存関係**:
  - 依存関係は`pyproject.toml`で管理（Poetry形式）
  - バージョン指定にはセマンティックバージョニングを使用（`^`記法）
  - 開発環境と本番環境の依存関係は`poetry.group.dev.dependencies`で分離
- **仮想環境**: Poetryの仮想環境機能を使用し、プロジェクト固有の依存関係を管理する

## エラー処理

- 例外は具体的なタイプで捕捉し、`except Exception`のみの使用は避ける
- エラーメッセージは具体的で説明的にする
- エラーは適切にログに記録する（`loguru`を使用）

## テスト

- 新機能には必ずユニットテストを書く
- モックとフィクスチャを使用して外部依存を分離
- パラメータ化テストを活用して広範囲のケースをカバー
- テストカバレッジは80%以上を目標とする

## Gmail APIとの連携

- 認証情報は環境変数または安全な設定ファイルで管理
- API接続には適切なエラー処理とリトライ戦略を実装
- レート制限を考慮し、バッチ処理でAPIコールを最適化

## メール解析

- 正規表現パターンはテストでカバーし、維持しやすいように整理
- 国際化（異なる言語のメール）に対応できるように設計
- 新しいメールテンプレートに容易に対応できる拡張性を備える

## 外部サービス連携

- 連携先サービスごとにモジュールを分離
- モックを使用したテストで結合なしに検証可能にする
- エラー処理とリトライ戦略を各サービス連携に実装

## ロギング

- ログレベルを適切に使い分ける
  - DEBUG: 詳細なデバッグ情報
  - INFO: 一般的な情報・操作
  - WARNING: 対応が必要かもしれない状況
  - ERROR: エラー（復旧可能）
  - CRITICAL: 重大なエラー（プログラム停止など）
- 機密情報はログに記録しない

## 設定管理

- 設定は環境ごとに分離（開発、テスト、本番）
- 機密情報は環境変数または暗号化された設定ファイルで管理
- 設定ファイルにはデフォルト値と説明を含める

## GitとCI/CD

- コミット前に`pre-commit`フックでコードを検証
- プルリクエスト作成時に自動テスト実行
- ブランチ戦略: feature/fix/hotfixブランチからmainにPR
- **コミット習慣**:
  - 各タスクが完了したら必ずgit commitを行う
  - コミットメッセージには作業内容の要約と詳細を含める
  - Cline上のタスクについては、promptの履歴をコミットメッセージに含める
  - コミット前に変更内容を確認し、不要なファイルが含まれていないか確認する
- **コミットメッセージの形式**:
  ```
  [タスク種別] 簡潔な変更内容の説明

  - 変更点の詳細1
  - 変更点の詳細2

  Clineプロンプト履歴:
  1. ユーザーからの指示: 「...」
  2. 実装したアクション: 「...」
  ```

## セキュリティ

- APIキーやトークンをハードコードしない
- ユーザー入力やメール内容は常にサニタイズして処理
- 依存パッケージの脆弱性を定期的にチェック
